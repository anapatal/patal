//+------------------------------------------------------------------+
//|                Advanced Weierstrass Strategy                     |
//+------------------------------------------------------------------+
#property strict

// Input parameters
input int    Iterations = 200;         // Number of iterations
input double a_Param = 0.7;            // Parameter a (0 < a < 1)
input double b_Param = 7.0;            // Parameter b (positive integer)
input int    FastPeriod = 5;           // Fast Weierstrass MA period
input int    SlowPeriod = 20;          // Slow Weierstrass MA period
input double LotSize = 0.1;            // Base lot size
input int    MagicNumber = 123456;     // EA magic number
input double RiskPercent = 2.0;        // Risk percentage per trade
input bool   UseTrailingStop = true;   // Enable trailing stop
input int    TrailingStopPoints = 100; // Trailing stop distance

// Global variables
double wBuffer[];  // Array for Weierstrass values

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   ArrayResize(wBuffer, SlowPeriod + 1);
   ArraySetAsSeries(wBuffer, true);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Weierstrass fractal function                                     |
//+------------------------------------------------------------------+
double WeierstrassFractal(double x, int n)
{
   double sum = 0.0;
   for(int k=0; k<=n; k++)
   {
      sum += pow(a_Param, k) * sin(pow(b_Param, k) * M_PI * x);
   }
   return sum;
}

//+------------------------------------------------------------------+
//| Calculate dynamic lot size based on risk                         |
//+------------------------------------------------------------------+
double CalculateLotSize(double stopLossDistance)
{
   double tickValue = MarketInfo(Symbol(), MODE_TICKVALUE);
   if(tickValue == 0) return LotSize;
   
   double riskAmount = AccountBalance() * RiskPercent / 100.0;
   double lotSize = riskAmount / (stopLossDistance * tickValue);
   lotSize = NormalizeDouble(lotSize, 2);
   
   // Check minimum and maximum lot size
   double minLot = MarketInfo(Symbol(), MODE_MINLOT);
   double maxLot = MarketInfo(Symbol(), MODE_MAXLOT);
   lotSize = MathMax(lotSize, minLot);
   lotSize = MathMin(lotSize, maxLot);
   
   return lotSize;
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Calculate normalized price position (0 to 1)
   static datetime lastBarTime = 0;
   if(Time[0] == lastBarTime) return; // Process only once per bar
   lastBarTime = Time[0];
   
   double highest = iHigh(NULL, 0, iHighest(NULL, 0, MODE_HIGH, SlowPeriod, 1));
   double lowest = iLow(NULL, 0, iLowest(NULL, 0, MODE_LOW, SlowPeriod, 1));
   double range = highest - lowest;
   if(range == 0) return;
   
   double normalizedPrice = (Close[0] - lowest) / range;
   
   // Calculate Weierstrass value
   double wValue = WeierstrassFractal(normalizedPrice, Iterations);
   
   // Update buffer
   for(int i=SlowPeriod; i>0; i--) wBuffer[i] = wBuffer[i-1];
   wBuffer[0] = wValue;
   
   // Calculate fast and slow MAs of Weierstrass values
   double fastMA = 0, slowMA = 0;
   for(int i=0; i<FastPeriod; i++) fastMA += wBuffer[i];
   for(int i=0; i<SlowPeriod; i++) slowMA += wBuffer[i];
   fastMA /= FastPeriod;
   slowMA /= SlowPeriod;
   
   // Trading logic
   if(CountPositions() == 0)
   {
      // Buy signal when fast MA crosses above slow MA
      if(fastMA > slowMA && wBuffer[0] > wBuffer[1])
      {
         double sl = lowest;
         double riskPoints = (Ask - sl) / Point;
         if(riskPoints <= 0) return;
         
         double lots = CalculateLotSize(riskPoints);
         double tp = Ask + (Ask - sl) * 2; // 1:2 risk-reward
         OrderSend(Symbol(), OP_BUY, lots, Ask, 3, sl, tp, "Weierstrass Buy", MagicNumber, 0, clrGreen);
      }
      // Sell signal when fast MA crosses below slow MA
      else if(fastMA < slowMA && wBuffer[0] < wBuffer[1])
      {
         double sl = highest;
         double riskPoints = (sl - Bid) / Point;
         if(riskPoints <= 0) return;
         
         double lots = CalculateLotSize(riskPoints);
         double tp = Bid - (sl - Bid) * 2; // 1:2 risk-reward
         OrderSend(Symbol(), OP_SELL, lots, Bid, 3, sl, tp, "Weierstrass Sell", MagicNumber, 0, clrRed);
      }
   }
   else // Manage open positions
   {
      if(UseTrailingStop)
      {
         for(int i=OrdersTotal()-1; i>=0; i--)
         {
            if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
            {
               if(OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
               {
                  if(OrderType() == OP_BUY)
                  {
                     double newSl = Bid - TrailingStopPoints * Point;
                     newSl = NormalizeDouble(newSl, Digits);
                     if(newSl > OrderStopLoss())
                     {
                        OrderModify(OrderTicket(), OrderOpenPrice(), newSl, OrderTakeProfit(), 0, clrNONE);
                     }
                  }
                  else if(OrderType() == OP_SELL)
                  {
                     double newSl = Ask + TrailingStopPoints * Point;
                     newSl = NormalizeDouble(newSl, Digits);
                     if(newSl < OrderStopLoss() || OrderStopLoss() == 0)
